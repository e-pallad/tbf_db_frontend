{"version":3,"sources":["bearbeiten/Table.js"],"names":["pushDataToDb","pushData","table","a","formData","FormData","append","JSON","stringify","config","method","body","fetch","result","ok","Error","statusText","console","log","temps","params","value","pressure","overpressure","density","millimeters","meters","volumeFlow","weight","massFlow","rpm","space","solidsContent","conveyingVolume","protectionClass","power","voltage","current","volume","Table","props","onGridReady","gridApi","api","gridColumnApi","columnApi","allColumnIds","getAllColumns","forEach","column","push","colId","autoSizeColumns","state","editType","defaultColDef","sortable","editable","filter","resizable","bind","dataChanged","getMaxTBFID","onAddRow","then","res","json","setState","maxTBFID","parseInt","error","this","applyTransaction","add","TBF_ID","data","response","fetchMskValues","match","find","msk","button","tableData","columns","slice","map","header","cellEditor","cellEditorParams","headerName","field","refData","valueFormatter","className","onClick","id","style","height","width","columnDefs","rowData","pagination","suppressFieldDotNotation","onRowValueChanged","Component"],"mappings":"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","file":"static/js/4.93361252.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { AgGridReact } from 'ag-grid-react';\nimport './table.css';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nasync function pushDataToDb(pushData, table) {\n\n    const url = 'https://tbf-db-backend.ep-projekte.de/updateTable.php';\n\n    const formData = new FormData();  \n    formData.append('table', table); \n    formData.append('data', JSON.stringify(pushData));  \n\n    const config = { \n        method: 'POST',\n        body: formData\n    };\n    try {\n        const result = await fetch(url, config)\n        if (!result.ok) {\n            throw Error(result.statusText);\n        } else {\n            return result\n        }\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n\nfunction temps(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' °C';\n    } else {\n        return 'in °C';\n    }\n}\n\nfunction pressure(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' mbar';\n    } else {\n        return 'in mbar';\n    }\n}\n\nfunction overpressure(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' barü';\n    } else {\n        return 'in barü';\n    }\n}\n\nfunction density(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' kg/Nm³/h';\n    } else {\n        return 'in kg/Nm³/h';\n    }\n    \n}\n\nfunction millimeters(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' mm';\n    } else {\n        return  'in mm';\n    }\n}\n\nfunction meters(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' m';\n    } else {\n        return  'in m';\n    }\n    \n}\n\nfunction volumeFlow(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' Nm³/h';\n    } else {\n        return 'in Nm³/h';\n    }\n    \n}\n\nfunction weight(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' kg';\n    } else {\n        return 'in kg';\n    }\n    \n}\n\nfunction massFlow(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' kg/h';\n    } else {\n        return 'in kg/h';\n    }\n    \n}\n\nfunction rpm(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' U/min';\n    } else {\n        return 'in U/min';\n    }\n}\n\nfunction space(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' m²';\n    } else {\n        return 'in m²';\n    }\n    \n}\n\nfunction solidsContent(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' g/kg';\n    } else {\n        return 'in g/kg';\n    }\n}\n\nfunction conveyingVolume(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' m³/h';\n    } else {\n        return 'in m³/h';\n    }\n}\n\nfunction protectionClass(params) {\n    if (params.value || params.value === 0) {\n        return 'IP' + params.value;\n    } else {\n        return 'als Schutzartnummer';\n    }\n}\n\nfunction power(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' kW';\n    } else {\n        return 'in kW';\n    }\n}\n\nfunction voltage(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' V';\n    } else {\n        return 'in V';\n    }\n}\n\nfunction current(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' A';\n    } else {\n        return 'in A';\n    }\n}\n\nfunction volume(params) {\n    if (params.value || params.value === 0) {\n        return params.value + ' m³';\n    } else {\n        return 'in m³';\n    } \n}\n\n\nexport default class Table extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editType: 'fullRow',\n            defaultColDef: {\n                sortable: true,\n                editable: true,\n                filter: true,\n                resizable: true,\n            },\n            table: this.props.table\n        }\n        this.onGridReady = this.onGridReady.bind(this);\n        this.dataChanged = this.dataChanged.bind(this);\n        this.getMaxTBFID = this.getMaxTBFID.bind(this);\n        this.onAddRow = this.onAddRow.bind(this);\n    }\n\n    async getMaxTBFID() {\n        return fetch('https://tbf-db-backend.ep-projekte.de/getMaxTBFID.php')\n        .then(res => res.json())\n        .then(\n            (result) => {\n                this.setState({\n                    maxTBFID: parseInt(result),\n                });\n            },\n            (error) => {\n                this.setState({\n                    error\n                });\n            }   \n        )\n    }\n\n    async onAddRow() {\n        if (!this.state.maxTBFID) {\n            await this.getMaxTBFID()\n        } \n        \n        this.setState({ maxTBFID: this.state.maxTBFID + 1}, () => {\n            console.log(this.state.maxTBFID)\n            this.gridApi.applyTransaction({\n                add: [{TBF_ID: this.state.maxTBFID}],\n            })\n        })\n        \n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n\n        var allColumnIds = [];\n        this.gridColumnApi.getAllColumns().forEach(function(column) {\n            allColumnIds.push(column.colId);\n        });\n        //params.columnApi.autoSizeColumns(allColumnIds, true)\n        params.columnApi.autoSizeColumns(allColumnIds)\n        //params.api.sizeColumnsToFit();\n        //params.gridApi.autoSizeColumns(true)\n    };\n\n    dataChanged(data) {\n        if (this.state.table === \"RI-TBF_SEF_Elektroangaben\") {\n\n            console.log(data.data);\n\n            async function fetchMskValues() {\n                const response = await fetch('https://tbf-db-backend.ep-projekte.de/getTypicalMskValues.php')\n                const result = await response.json()\n                return result\n            }\n\n            fetchMskValues().then(result => {\n                    var match = result.find(msk => msk[0] === data.data[\"Typical Nr. MSK\"])\n                    if (match) {\n                        if (!data.data[\"Anzahl AI\"]) {\n                            data.data[\"Anzahl AI\"] = parseInt(match[4])\n                        }\n                        if (!data.data[\"Anzahl AO\"]) {\n                            data.data[\"Anzahl AO\"] = parseInt(match[5])\n                        }\n                        if (!data.data[\"Anzahl DI\"]) {\n                            data.data[\"Anzahl DI\"] = parseInt(match[2])\n                        }\n                        if (!data.data[\"Anzahl DO\"]) {\n                            data.data[\"Anzahl DO\"] = parseInt(match[3])\n                        }\n                    } else {\n                        if (data.data[\"Anzahl AI\"] || data.data[\"Anzahl AO\"] || data.data[\"Anzahl DI\"] || data.data[\"Anzahl DO\"]) {\n                            ; // Dont do anything\n                        } else {\n                            data.data[\"Anzahl AI\"] = null\n                            data.data[\"Anzahl AO\"] = null\n                            data.data[\"Anzahl DI\"] = null\n                            data.data[\"Anzahl DO\"] = null\n                        }\n                    }\n                    pushDataToDb(data.data, this.state.table)\n                }\n            )\n        } else {\n            pushDataToDb(data.data, this.state.table)\n        }\n    }\n\n    render() {\n        const { tableData } = this.props\n        const { table } = this.state\n        let button;\n\n        const columns = tableData.slice(0,1).map(( header ) => {\n            return(\n                header.map(( column ) => {\n                    if (column.cellEditor && column.cellEditorParams) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            cellEditor: column.cellEditor,\n                            cellEditorParams: column.cellEditorParams,\n                            refData: column.refData,\n                        })\n                    } else if (\n                        column.headerName === 'Berechnungstemperatur' || \n                        column.headerName === 'Betriebstemperatur' || \n                        column.headerName === 'max. zul. Temperatur' || \n                        column.headerName === 'Temperatur max' || \n                        column.headerName === 'Temperatur min' || \n                        column.headerName === 'Temperatur nom' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: temps,\n                        })\n                    } else if (\n                        column.headerName === 'Druck max hPa_a' || \n                        column.headerName === 'Druck max Mpa_a' || \n                        column.headerName === 'Druck min hPa_a' || \n                        column.headerName === 'Druck min Mpa_a' || \n                        column.headerName === 'Druck nom hPa_a' || \n                        column.headerName === 'Druck nom Mpa_a' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: pressure,\n                        })\n                    } else if (\n                        column.headerName === 'Berechnungsüberdruck' || \n                        column.headerName === 'Betriebsüberdruck' || \n                        column.headerName === 'max. zul. Druck'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: overpressure,\n                        })\n                    } else if (\n                        column.headerName === 'Dichte max' || \n                        column.headerName === 'Dichte min' || \n                        column.headerName === 'Dichte nom'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: density,\n                        })\n                    } else if (\n                        column.headerName === 'Durchmesser' || \n                        column.headerName === 'Höhe' || \n                        column.headerName === 'Länge [mm]' || \n                        column.headerName === 'Radius' || \n                        column.headerName === 'Wanddicke' || \n                        column.headerName === 'Breite' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: millimeters,\n                        })\n                    } else if (\n                        column.headerName === 'Kabel 1 Länge' || \n                        column.headerName === 'Kabel 2 Länge' || \n                        column.headerName === 'Kabel 3 Länge' || \n                        column.headerName === 'Kabel 4 Länge' || \n                        column.headerName === 'Kabel 5 Länge' || \n                        column.headerName === 'Länge [m]' ||\n                        column.headerName === 'Raumlänge' || \n                        column.headerName === 'Raumbreite' || \n                        column.headerName === 'Raumhöhe' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: meters,\n                        })\n                    } else if (\n                        column.headerName === 'Volumenstrom max' || \n                        column.headerName === 'Volumenstrom min' || \n                        column.headerName === 'Volumenstrom nom' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: volumeFlow,\n                        })\n                    } else if (\n                        column.headerName === 'Massenstrom max' || \n                        column.headerName === 'Massenstrom min' || \n                        column.headerName === 'Massenstrom nom' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: massFlow,\n                        })\n                    } else if (\n                        column.headerName === 'Drehzahl'  \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: rpm,\n                        })\n                    } else if (\n                        column.headerName === 'Raumfläche' ||\n                        column.headerName === 'Fläche'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: space,\n                        })\n                    } else if (\n                        column.headerName === 'Feststoffgehalt max' || \n                        column.headerName === 'Feststoffgehalt min' || \n                        column.headerName === 'Feststoffgehalt nom' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: solidsContent,\n                        })\n                    } else if (\n                        column.headerName === 'Fördervolumen' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: conveyingVolume,\n                        })\n                    } else if (\n                        column.headerName === 'Gewicht'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: weight,\n                        })\n                    } else if (\n                        column.headerName === 'IP-Schutzart'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: protectionClass,\n                        })\n                    } else if (\n                        column.headerName === 'Nennleistung'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: power,\n                        })\n                    } else if (\n                        column.headerName === 'Nennspannung'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: voltage,\n                        })\n                    } else if (\n                        column.headerName === 'Nennstrom'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: current,\n                        })\n                    } else if (\n                        column.headerName === 'Raumvolumen' ||\n                        column.headerName === 'Volumen'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: volume,\n                        })\n                    } else {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                        })\n                    }\n                })\n            )\n        })  \n        \n        const data = tableData.slice(1)\n\n        if (table === 'RI-TBF_SEF_Elektrokomponentenliste') {\n            button = <button className=\"btn btn-outline-success mb-2\" onClick={this.onAddRow}>Zeile hinzufügen</button>\n        } else {\n            button = null\n        }\n        \n        return (\n            <div id=\"grid\" className=\"p-0 overflow-hidden w-100 h-100\">\n                <nav className=\"navbar navbar-light bg-light\">\n                    <h2 className=\"navbar-brand\">{table}</h2>\n                    {button}\n                </nav>\n                <div className=\"ag-theme-alpine\" style={ { height: 'calc(100% - 60px)', width: '100%'} }>\n                    <AgGridReact\n                        columnDefs={columns[0]}\n                        \n                        defaultColDef={this.state.defaultColDef}\n                        rowData={data}\n\n                        editType={this.state.editType}\n                        pagination={true}\n                        //stopEditingWhenGridLosesFocus={true}\n                        suppressFieldDotNotation={true}\n                        \n                        onRowValueChanged={this.dataChanged}\n                        onGridReady={this.onGridReady}\n                        />\n                </div>\n            </div>\n        );\n    }\n  }"],"sourceRoot":""}