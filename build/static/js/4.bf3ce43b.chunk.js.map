{"version":3,"sources":["bearbeiten/Cellconversions.js","bearbeiten/Table.js"],"names":["cellConversion","temps","params","value","pressure","overpressure","density","millimeters","meters","volumeFlow","weight","massFlow","rpm","space","solidsContent","conveyingVolume","protectionClass","power","voltage","current","volume","pushDataToDb","pushData","table","a","formData","FormData","append","JSON","stringify","config","method","body","fetch","result","ok","Error","statusText","console","log","Table","props","onGridReady","gridApi","api","gridColumnApi","columnApi","allColumnIds","getAllColumns","forEach","column","push","colId","autoSizeColumns","state","editType","defaultColDef","sortable","editable","filter","resizable","bind","dataChanged","getMaxTBFID","onAddRow","then","res","json","setState","maxTBFID","parseInt","error","this","applyTransaction","add","TBF_ID","data","response","fetchMskValues","match","find","msk","button","tableData","cc","columns","slice","map","header","cellEditor","cellEditorParams","headerName","field","refData","valueFormatter","className","onClick","id","style","height","width","columnDefs","rowData","pagination","suppressFieldDotNotation","onRowValueChanged","Component"],"mappings":"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","file":"static/js/4.bf3ce43b.chunk.js","sourcesContent":["function dotConversion(value) {\n    return value //.toString().replace('.', ',');\n}\n\nconst cellConversion = {\n\n    temps: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' °C';\n        } else {\n            return 'in °C';\n        }\n    },\n    \n    pressure: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' mbar';\n        } else {\n            return 'in mbar';\n        }\n    },\n    \n    overpressure: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' barü';\n        } else {\n            return 'in barü';\n        }\n    },\n    \n    density: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' kg/Nm³/h';\n        } else {\n            return 'in kg/Nm³/h';\n        }\n        \n    },\n    \n    millimeters: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' mm';\n        } else {\n            return  'in mm';\n        }\n    },\n    \n    meters: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' m';\n        } else {\n            return  'in m';\n        }\n        \n    },\n    \n    volumeFlow: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' Nm³/h';\n        } else {\n            return 'in Nm³/h';\n        }\n        \n    },\n    \n    weight: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' kg';\n        } else {\n            return 'in kg';\n        }\n        \n    },\n    \n    massFlow: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' kg/h';\n        } else {\n            return 'in kg/h';\n        }\n        \n    },\n    \n    rpm: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' U/min';\n        } else {\n            return 'in U/min';\n        }\n    },\n    \n    space: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' m²';\n        } else {\n            return 'in m²';\n        }\n        \n    },\n    \n    solidsContent: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' g/kg';\n        } else {\n            return 'in g/kg';\n        }\n    },\n    \n    conveyingVolume: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' m³/h';\n        } else {\n            return 'in m³/h';\n        }\n    },\n    \n    protectionClass: function(params) {\n        if (params.value || params.value === 0) {\n            return 'IP' + params.value;\n        } else {\n            return 'als Schutzartnummer';\n        }\n    },\n    \n    power: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' kW';\n        } else {\n            return 'in kW';\n        }\n    },\n    \n    voltage: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' V';\n        } else {\n            return 'in V';\n        }\n    },\n    \n    current: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' A';\n        } else {\n            return 'in A';\n        }\n    },\n    \n    volume: function(params) {\n        if (params.value || params.value === 0) {\n            return dotConversion(params.value) + ' m³';\n        } else {\n            return 'in m³';\n        } \n    },\n};\n\nexport default cellConversion;","import React, { Component } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport cellConversion from './Cellconversions'\nimport './table.css';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nasync function pushDataToDb(pushData, table) {\n\n    const url = 'https://tbf-db-backend.ep-projekte.de/updateTable.php';\n\n    const formData = new FormData();  \n    formData.append('table', table); \n    formData.append('data', JSON.stringify(pushData));  \n\n    const config = { \n        method: 'POST',\n        body: formData\n    };\n    try {\n        const result = await fetch(url, config)\n        if (!result.ok) {\n            throw Error(result.statusText);\n        } else {\n            return result\n        }\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n\nexport default class Table extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editType: 'fullRow',\n            defaultColDef: {\n                sortable: true,\n                editable: true,\n                filter: true,\n                resizable: true,\n            },\n            table: this.props.table\n        }\n        this.onGridReady = this.onGridReady.bind(this);\n        this.dataChanged = this.dataChanged.bind(this);\n        this.getMaxTBFID = this.getMaxTBFID.bind(this);\n        this.onAddRow = this.onAddRow.bind(this);\n    }\n\n    async getMaxTBFID() {\n        return fetch('https://tbf-db-backend.ep-projekte.de/getMaxTBFID.php')\n        .then(res => res.json())\n        .then(\n            (result) => {\n                this.setState({\n                    maxTBFID: parseInt(result),\n                });\n            },\n            (error) => {\n                this.setState({\n                    error\n                });\n            }   \n        )\n    }\n\n    async onAddRow() {\n        if (!this.state.maxTBFID) {\n            await this.getMaxTBFID()\n        } \n        \n        this.setState({ maxTBFID: this.state.maxTBFID + 1}, () => {\n            console.log(this.state.maxTBFID)\n            this.gridApi.applyTransaction({\n                add: [{TBF_ID: this.state.maxTBFID}],\n            })\n        })\n        \n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n\n        var allColumnIds = [];\n        this.gridColumnApi.getAllColumns().forEach(function(column) {\n            allColumnIds.push(column.colId);\n        });\n        //params.columnApi.autoSizeColumns(allColumnIds, true)\n        params.columnApi.autoSizeColumns(allColumnIds)\n        //params.api.sizeColumnsToFit();\n        //params.gridApi.autoSizeColumns(true)\n    };\n\n    dataChanged(data) {\n        if (this.state.table === \"RI-TBF_SEF_Elektroangaben\") {\n\n            console.log(data.data);\n\n            async function fetchMskValues() {\n                const response = await fetch('https://tbf-db-backend.ep-projekte.de/getTypicalMskValues.php')\n                const result = await response.json()\n                return result\n            }\n\n            fetchMskValues().then(result => {\n                    var match = result.find(msk => msk[0] === data.data[\"Typical Nr. MSK\"])\n                    if (match) {\n                        if (!data.data[\"Anzahl AI\"]) {\n                            data.data[\"Anzahl AI\"] = parseInt(match[4])\n                        }\n                        if (!data.data[\"Anzahl AO\"]) {\n                            data.data[\"Anzahl AO\"] = parseInt(match[5])\n                        }\n                        if (!data.data[\"Anzahl DI\"]) {\n                            data.data[\"Anzahl DI\"] = parseInt(match[2])\n                        }\n                        if (!data.data[\"Anzahl DO\"]) {\n                            data.data[\"Anzahl DO\"] = parseInt(match[3])\n                        }\n                    } else {\n                        if (data.data[\"Anzahl AI\"] || data.data[\"Anzahl AO\"] || data.data[\"Anzahl DI\"] || data.data[\"Anzahl DO\"]) {\n                            ; // Dont do anything\n                        } else {\n                            data.data[\"Anzahl AI\"] = null\n                            data.data[\"Anzahl AO\"] = null\n                            data.data[\"Anzahl DI\"] = null\n                            data.data[\"Anzahl DO\"] = null\n                        }\n                    }\n                    pushDataToDb(data.data, this.state.table)\n                }\n            )\n        } else {\n            pushDataToDb(data.data, this.state.table)\n        }\n    }\n\n    render() {\n        const { tableData } = this.props;\n        const { table } = this.state;\n        const cc = cellConversion;\n        let button;\n\n        const columns = tableData.slice(0,1).map(( header ) => {\n            return(\n                header.map(( column ) => {\n                    if (column.cellEditor && column.cellEditorParams) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            cellEditor: column.cellEditor,\n                            cellEditorParams: column.cellEditorParams,\n                            refData: column.refData,\n                        })\n                    } else if (\n                        column.headerName === 'Berechnungstemperatur' || \n                        column.headerName === 'Betriebstemperatur' || \n                        column.headerName === 'max. zul. Temperatur' || \n                        column.headerName === 'Temperatur max' || \n                        column.headerName === 'Temperatur min' || \n                        column.headerName === 'Temperatur nom' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.temps,\n                        })\n                    } else if (\n                        column.headerName === 'Druck max hPa_a' || \n                        column.headerName === 'Druck max Mpa_a' || \n                        column.headerName === 'Druck min hPa_a' || \n                        column.headerName === 'Druck min Mpa_a' || \n                        column.headerName === 'Druck nom hPa_a' || \n                        column.headerName === 'Druck nom Mpa_a' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.pressure,\n                        })\n                    } else if (\n                        column.headerName === 'Berechnungsüberdruck' || \n                        column.headerName === 'Betriebsüberdruck' || \n                        column.headerName === 'max. zul. Druck'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.overpressure,\n                        })\n                    } else if (\n                        column.headerName === 'Dichte max' || \n                        column.headerName === 'Dichte min' || \n                        column.headerName === 'Dichte nom'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.density,\n                        })\n                    } else if (\n                        column.headerName === 'Durchmesser' || \n                        column.headerName === 'Höhe' || \n                        column.headerName === 'Länge [mm]' || \n                        column.headerName === 'Radius' || \n                        column.headerName === 'Wanddicke' || \n                        column.headerName === 'Breite' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.millimeters,\n                        })\n                    } else if (\n                        column.headerName === 'Kabel 1 Länge' || \n                        column.headerName === 'Kabel 2 Länge' || \n                        column.headerName === 'Kabel 3 Länge' || \n                        column.headerName === 'Kabel 4 Länge' || \n                        column.headerName === 'Kabel 5 Länge' || \n                        column.headerName === 'Länge [m]' ||\n                        column.headerName === 'Raumlänge' || \n                        column.headerName === 'Raumbreite' || \n                        column.headerName === 'Raumhöhe' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.meters,\n                        })\n                    } else if (\n                        column.headerName === 'Volumenstrom max' || \n                        column.headerName === 'Volumenstrom min' || \n                        column.headerName === 'Volumenstrom nom' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.volumeFlow,\n                        })\n                    } else if (\n                        column.headerName === 'Massenstrom max' || \n                        column.headerName === 'Massenstrom min' || \n                        column.headerName === 'Massenstrom nom' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.massFlow,\n                        })\n                    } else if (\n                        column.headerName === 'Drehzahl'  \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.rpm,\n                        })\n                    } else if (\n                        column.headerName === 'Raumfläche' ||\n                        column.headerName === 'Fläche'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.space,\n                        })\n                    } else if (\n                        column.headerName === 'Feststoffgehalt max' || \n                        column.headerName === 'Feststoffgehalt min' || \n                        column.headerName === 'Feststoffgehalt nom' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.solidsContent,\n                        })\n                    } else if (\n                        column.headerName === 'Fördervolumen' \n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.conveyingVolume,\n                        })\n                    } else if (\n                        column.headerName === 'Gewicht'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.weight,\n                        })\n                    } else if (\n                        column.headerName === 'IP-Schutzart'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.protectionClass,\n                        })\n                    } else if (\n                        column.headerName === 'Nennleistung'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.power,\n                        })\n                    } else if (\n                        column.headerName === 'Nennspannung'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.voltage,\n                        })\n                    } else if (\n                        column.headerName === 'Nennstrom'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.current,\n                        })\n                    } else if (\n                        column.headerName === 'Raumvolumen' ||\n                        column.headerName === 'Volumen'\n                    ) {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                            valueFormatter: cc.volume,\n                        })\n                    } else {\n                        return({\n                            headerName: column.headerName,\n                            field: column.field,\n                            editable: column.editable,\n                        })\n                    }\n                })\n            )\n        })  \n        \n        const data = tableData.slice(1)\n\n        if (table === 'RI-TBF_SEF_Elektrokomponentenliste') {\n            button = <button className=\"btn btn-outline-success mb-2\" onClick={this.onAddRow}>Zeile hinzufügen</button>\n        } else {\n            button = null\n        }\n        \n        return (\n            <div id=\"grid\" className=\"p-0 overflow-hidden w-100 h-100\">\n                <nav className=\"navbar navbar-light bg-light\">\n                    <h2 className=\"navbar-brand\">{table}</h2>\n                    {button}\n                    {/*loading*/}\n                </nav>\n                <div className=\"ag-theme-alpine\" style={ { height: 'calc(100% - 60px)', width: '100%'} }>\n                    <AgGridReact\n                        columnDefs={columns[0]}\n                        \n                        defaultColDef={this.state.defaultColDef}\n                        rowData={data}\n\n                        editType={this.state.editType}\n                        pagination={true}\n                        //stopEditingWhenGridLosesFocus={true}\n                        suppressFieldDotNotation={true}\n                        \n                        onRowValueChanged={this.dataChanged}\n                        onGridReady={this.onGridReady}\n                        />\n                </div>\n            </div>\n        );\n    }\n  }"],"sourceRoot":""}